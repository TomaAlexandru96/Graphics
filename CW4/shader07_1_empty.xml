<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn;

//Vertex shader compute the vectors per vertex
void main(void)
{
    //Put the vertex in the correct coordinate system by applying the model view matrix
    vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;
	vertexIn.position_camSpace = vertex_camSpace;
	
    //Apply the model-view transformation to the normal (only rotation, no translation)
    //Normals put in the camera space
    vertexIn.normal_camSpace = normalize(normalMatrix*normal_worldSpace);

	//Color chosen as red
	vertexIn.color = vec4(1.0,0.0,0.0,1.0);
    
    //Texture coordinate
    vertexIn.textureCoordinate = textureCoordinate_input;
	
    gl_Position = pMatrix * vertex_camSpace;
}












]]></vertex>
<geom>
<![CDATA[#version 400

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space


in data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn[3];

out fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;


void main() {
  for(int i = 0; i < 3; i++) { // You used triangles, so it's always 3
    gl_Position = gl_in[i].gl_Position;
	frag.position_camSpace = vertexIn[i].position_camSpace;
	frag.normal_camSpace = vertexIn[i].normal_camSpace;
	frag.textureCoordinate = vertexIn[i].textureCoordinate;
	frag.color = vertexIn[i].color;
    EmitVertex();
  }
  EndPrimitive();
}











]]></geom>
<frag>
<![CDATA[#version 400

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;


out vec4 fragColor;

//Fragment shader computes the final color
void main(void)
{
	//Not used in that task
    fragColor =  frag.color;
}











]]></frag>
<R2TVert>
<![CDATA[#version 400
#extension GL_ARB_separate_shader_objects : enable

uniform mat4 mMatrix;
uniform mat4 mvMatrix;

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;

out vec3 dir; 
out vec4 r_pos;

void  main () 
{ 
	vec4 vertex_modelSpace = mMatrix*vertex_worldSpace;
	
    dir = normalize ( vec3 ( vertex_modelSpace.x * 1.6,  vertex_modelSpace.y , -1.0 )); 
	
    gl_Position  = vertex_modelSpace; 
	r_pos = gl_Position;
}












]]></R2TVert>
<R2TFrag>
<![CDATA[#version 400
#define EPSILON 0.00001
#define M_PI 3.14159265359

in vec3 dir; 
in vec4 r_pos;
out vec4 outcolour;

uniform mat4 mMatrix;
uniform mat4 mvMatrix;
uniform mat4 mvMatrixScene;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

const int raytraceDepth = 42;
const int numSpheres = 6;

// light
const vec4 ambient_c = vec4(0.1, 0.1, 0.1, 1);
const vec4 diffuse_c = vec4(0.3, 0.3, 0.3, 1);
const vec4 specular_c = vec4(1, 1, 1, 1);
const float shininess = 1;
const vec4 light_pos = vec4(6, 4, 3, 1);

// illumination
vec4 get_phong_shading(vec4 point_position, vec4 point_normal, vec4 light_position,
										vec4 colour)
{
	// surface normal
	vec4 n = point_normal;
	// unit vector in direction of light
	vec4 l = light_position - point_position;
	vec4 v = -normalize(point_position);
	float n_dot_l = max(dot(normalize(n), normalize(l)), 0);
	vec4 r = 2 * dot(normalize(n), normalize(l)) * normalize(n) - normalize(l);
	float v_dot_r = max(dot(v, r), 0);
	float d = sqrt(dot(l, l));

	vec4 ambient = ambient_c * colour;
	vec4 diffuse = diffuse_c * colour;
	vec4 specular = specular_c * colour;

	vec4 ambientI = ambient;
	vec4 diffuseI = diffuse * n_dot_l;
	vec4 specularI = specular * ((shininess + 2) / (2 * M_PI)) * pow(v_dot_r, shininess);
	vec4 phong_light = ambientI + diffuseI + specularI;

	return phong_light;
}


// debug
float debug_k = 0;
bool debug = false;


//example data structures
struct Ray
{
	vec3 origin;
	vec3 dir;
};
struct Sphere
{
	vec3 centre;
	float radius;
	vec3 colour;
};
struct Plane
{
	vec3 point;
	vec3 normal;
	vec3 colour;
};

struct Intersection
{
    float t; //closest hit
    vec3 point;	// hit point
    vec3 normal;	// normal
    int hit;	//did it hit?
    vec3 colour; // colour accumulation, can be also implemented in struct Ray
};

void shpere_intersect(Sphere sph, Ray ray, inout Intersection intersect)
{
	//TODO implement sphere intersection function
	vec3 delta_p = ray.origin - sph.centre;
	// float delta = dot(ray_normalized_dir, delta_p) - pow(length(delta_p), 2) + pow(sph.radius, 2);
	float delta = pow(dot(ray.dir, delta_p), 2) - pow(length(delta_p), 2)  + pow(sph.radius, 2);

	if (delta < 0)
	{
		intersect.hit = 0;
	}
	else
	{
		float miu = min(-dot(ray.dir, delta_p) - sqrt(delta),
									-dot(ray.dir, delta_p) + sqrt(delta));
		if (abs(miu) < 0.0001f)
		{
			miu = 0;
		}
		intersect.point = ray.origin + miu * ray.dir;
		intersect.hit = 1;
		// not sure
		intersect.normal = 2 * normalize((sph.centre - intersect.point));
		intersect.colour = get_phong_shading(vec4(intersect.point, 1), vec4(intersect.normal, 1), light_pos,
									 		vec4(sph.colour, 1)).xyz;
		// intersect.normal = vec3(4, 4, 4);
	}
}

void plane_intersect(Plane pl, Ray ray, inout Intersection intersect)
{
	float d_dot_n = dot(ray.dir, pl.normal);
	if (d_dot_n >= 0)
	{
		intersect.hit = 0;
	}
	else
	{
		float miu = -dot((ray.origin - pl.point), pl.normal) / d_dot_n;
		intersect.hit = 1;
		intersect.point = ray.origin + miu * ray.dir;
		intersect.normal = normalize(pl.normal);
		if ((int(floor(intersect.point.x * 5)) + int(floor(intersect.point.z * 5))) % 2 == 0)
		{
			intersect.colour = pl.colour;
		}
		else
		{
			intersect.colour = vec3(0, 0, 0);
		}
		vec4 col = vec4(intersect.colour, 1);
		intersect.colour = get_phong_shading(vec4(intersect.point, 1), vec4(intersect.normal, 1), light_pos,
									 		col).xyz;
	}
}

Sphere sphere[numSpheres];
Plane plane;
void Intersect(Ray r, inout Intersection i)
{
	float min_dist = 10000;
	i.hit = 0;
	for (int s = 0; s < numSpheres; s++) 
	{
		Intersection current;
		current.colour = vec3(0, 0, 0);
		current.hit = 0;
		shpere_intersect(sphere[s], r, current);
		if (current.hit != 0)
		{
			float dist = length(current.point - r.origin);
			if (min_dist > dist) 
			{
				min_dist = dist;
				i = current;
			}
		}
	}

	Intersection current;
	current.colour = vec3(0, 0, 0);
	current.hit = 0;
	plane_intersect(plane, r, current);
	if (current.hit != 0)
	{
		float dist = length(current.point - r.origin);
		if (min_dist > dist) 
		{
			min_dist = dist;
			i = current;
		}
	}
}

int seed = 0;
float rnd()
{
	seed = int(mod(float(seed)*1364.0+626.0, 509.0));
	return float(seed)/509.0;
}

vec3 computeShadow(in Intersection intersect)
{
	//TODO implement shadow computation
	return vec3(0,0,0);
}

void main()
{
	//please leave the scene config unaltered for marking 
	sphere[0].centre   = vec3(-2.0, 1.5, -3.5);
	sphere[0].radius   = 1.5;
	sphere[0].colour = vec3(0.8,0.8,0.8);
	sphere[1].centre   = vec3(-0.5, 0.0, -2.0);
	sphere[1].radius   = 0.6;
	sphere[1].colour = vec3(0.3,0.8,0.3);
	sphere[2].centre   = vec3(1.0, 0.7, -2.2);
	sphere[2].radius   = 0.8;
	sphere[2].colour = vec3(0.3,0.8,0.8);
	sphere[3].centre   = vec3(0.7, -0.3, -1.2);
	sphere[3].radius   = 0.2;
	sphere[3].colour = vec3(0.8,0.8,0.3);
	sphere[4].centre   = vec3(-0.7, -0.3, -1.2);
	sphere[4].radius   = 0.2;
	sphere[4].colour = vec3(0.8,0.3,0.3);
	sphere[5].centre   = vec3(0.2, -0.2, -1.2);
	sphere[5].radius   = 0.3;
	sphere[5].colour = vec3(0.8,0.3,0.8);
	plane.point = vec3(0,-0.5, 0);
	plane.normal = vec3(0, 1.0, 0);
	plane.colour = vec3(1, 1, 1);
	seed = int(mod(dir.x * dir.y * 39786038.0, 65536.0));
	//scene definition end

	//TODO implement ray tracing main loop here
	Ray r = Ray(r_pos.xyz, normalize(dir));

	int depth = 0;
    vec4 colour = vec4(0, 0, 0, 1);
	outcolour = colour;
	while (depth < raytraceDepth)
	{
		Intersection currentIntersection;
		Intersect(r, currentIntersection);
		if (currentIntersection.hit != 0)
		{
			colour = vec4(currentIntersection.colour + colour.xyz, 1);
			// computeShadow(currentIntersection);
		}
		else
		{
			break;
		}
		r.origin = currentIntersection.point;
		// not sure if random
		r.origin = r.origin + EPSILON * currentIntersection.normal;
		r.dir = normalize(reflect(r.dir, currentIntersection.normal));
		depth++;
	}

	outcolour = colour;
	if (debug)
 	{
		debug_k *= 1000;
		outcolour = vec4(debug_k / 255, debug_k /255, debug_k /255, 1);
	}
	if (debug && debug_k > 0) {
		outcolour = vec4(0, 1, 0, 1);
	}
}












]]></R2TFrag>
</pipeline>
